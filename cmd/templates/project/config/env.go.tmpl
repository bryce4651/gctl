package config

import (
	"github.com/ml444/gkit/log"
	"os"
	"strconv"
)

const (
	EnvKeyDebug  = "DEBUG"
	EnvEnableHTTP   = "ENABLE_HTTP"
	EnvEnableGRPC   = "ENABLE_GRPC"
	
	EnvAddrDebug  = "DEBUG_ADDR"
	EnvAddrHTTP   = "HTTP_ADDR"
	EnvAddrGRPC   = "GRPC_ADDR"
	EnvTracerAddr = "TRACER_ADDR"

	EnvKeyServiceDBURI = "SERVICE_DB_URI"
)

/* default value */
const (
	DefaultEnableDebug = false
	DefaultEnableHTTP  = true
	DefaultEnableGRPC  = true
	DefaultPprofAddr   = ":5060"
	DefaultHTTPAddr    = ":5050"
	DefaultGRPCAddr    = ":5040"
)

func initEnv() error {
	// Use environment variables, if set.
	if enable := os.Getenv(EnvKeyDebug); enable != "" {
		debug, err := strconv.ParseBool(enable)
		if err != nil {
			log.Errorf("err: %v", err)
		} else {
			GlobalConfig.Debug = debug
		}
	}
	if enable := os.Getenv("ENABLE_HTTP"); enable != "" {
		e, err := strconv.ParseBool(enable)
		if err != nil {
			log.Errorf("err: %v", err)
		} else {
			GlobalConfig.HTTPCfg.EnableHTTP = e
		}
	}
	if enable := os.Getenv("ENABLE_GRPC"); enable != "" {
		e, err := strconv.ParseBool(enable)
		if err != nil {
			log.Errorf("err: %v", err)
		} else {
			GlobalConfig.GrpcCfg.EnableGRPC = e
		}
	}
	if enable := os.Getenv("ENABLE_PPROF"); enable != "" {
		e, err := strconv.ParseBool(enable)
		if err != nil {
			log.Errorf("err: %v", err)
		} else {
			GlobalConfig.PProfCfg.EnablePprof = e
		}
	}
	if addr := os.Getenv("HTTP_ADDR"); addr != "" {
		GlobalConfig.HTTPCfg.HTTPAddr = addr
	}
	if addr := os.Getenv("GRPC_ADDR"); addr != "" {
		GlobalConfig.GrpcCfg.GRPCAddr = addr
	}
	if GlobalConfig.DBCfg == nil {
		GlobalConfig.DBCfg = &DBCfg{
			DBURI:           os.Getenv(EnvKeyServiceDBURI),
			ConnMaxLifeTime: 16 * 3600,
			ConnMaxIdleTime: 2 * 3600,
			MaxOpenConns:    10,
			MaxIdleConns:    100,
		}
	}

	return nil
}
